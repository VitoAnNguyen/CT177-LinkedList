#include<stdio.h>
#include<string.h>

#define MaxLength 40

typedef struct{
    char masv[11];
    char hoten[51];
    float lt;
    float th1;
    float th2;
}SinhVien;

typedef struct{
    SinhVien A[MaxLength];
    int n;
}DanhSach;



void nhap(DanhSach *ds){
    scanf("%d",&ds->n);
    getchar();
   
    for(int i=0;i<ds->n;i++){
        fgets(ds->A[i].masv,sizeof(ds->A[i].masv),stdin);
        ds->A[i].masv[strcspn(ds->A[i].masv,"\n")]='\0';
       
        fgets(ds->A[i].hoten,sizeof(ds->A[i].hoten),stdin);
        ds->A[i].hoten[strcspn(ds->A[i].hoten,"\n")]='\0';
       
        scanf("%f %f %f",&ds->A[i].lt,&ds->A[i].th1,&ds->A[i].th2);
        getchar();
    }
}

void hienthi(DanhSach ds){
    for(int i=0;i<ds.n;i++){
        printf("%s - %s - %.2f - %.2f - %.2f\n",ds.A[i].masv,ds.A[i].hoten,ds.A[i].lt,ds.A[i].th1,ds.A[i].th2 );
    }
}

void Timkiem(DanhSach ds, char macan[]){
    int found=0;
    for(int i=0;i<ds.n;i++){
        if(strcmp(ds.A[i].masv,macan)==0){
            printf("Tim thay sinh vien %s. Thong tin sinh vien:\n%s - %s - %.2f - %.2f - %.2f",ds.A[i].masv,ds.A[i].masv,ds.A[i].hoten,ds.A[i].lt,ds.A[i].th1,ds.A[i].th2);
            found=1;
            break;
        }
    }
    if(found==0){
        printf("Khong tim thay sinh vien %s",macan);
    }
}

int main(){
    DanhSach L;
    nhap(&L);
    hienthi(L);
    char macan[11];
    fgets(macan,sizeof(macan),stdin);
    macan[strcspn(macan,"\n")]='\0';
    Timkiem(L,macan);
}
#include<stdio.h>
#define Maxlength 100

typedef int Position;
typedef int ElementType;

typedef struct{
    int Elements[Maxlength];
    int Last;
}List;

int First(List L){
    return 1;
}

int endList(List L){
    return L.Last+1;
}

int retrieve(Position p, List L){
    return L.Elements[p-1];
}

Position next(Position p, List L){
    return p+1;
}
void insertList(int x, int p, List *pL){
    if(pL->Last==Maxlength){
        printf("danh sach day");
    }
    else if(p<First(*pL)||p>endList(*pL)){
        printf("loi");
    }else{
        Position q;
        for(q=pL->Last;q>p-1;q--){
            pL->Elements[q]=pL->Elements[q-1];
        }
            pL->Last++;
            pL->Elements[p-1]=x;
        }
    }


void deleteList(Position p, List *pL){
    for(int q=p-1;q<pL->Last;q++){
            pL->Elements[q]=pL->Elements[q+1];
    }
    pL->Last--;
}

int locate(int x, List *pL){
    Position p;
    p=First(*pL);
    while(p!=endList(*pL)){
        if(retrieve(p,*pL)==x){
                deleteList(p,pL);
            return p;
        }p=next(p,*pL);
    }
    return endList(*pL);
}


void nhapds(List *pL){
    int n, x;
    pL->Last = 0;
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        scanf("%d",&x);
        pL->Elements[pL->Last++]=x;
    }
}

void printds(List L){
    Position p;
    p=First(L);
    while(p!=endList(L)){
        printf("%d ", retrieve(p,L));
        p=next(p,L);
    }printf("\n");
}

int main(){
    List L;
    nhapds(&L);
    printds(L);
    int x;
    scanf("%d",&x);
    locate(x,&L);
    printds(L);

}
